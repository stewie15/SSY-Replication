#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('demo1:server');
let http = require('http');

if (process.argv.length != 4) {
    console.log('call like: node bin/www <server_id> <server_count>');
    process.exit(1);
}

// storing as globals for easy access
global.server_id = parseInt(process.argv[2]);
global.server_count = parseInt(process.argv[3]);

if (!(global.server_id > 0) || !(global.server_count > 0) || (global.server_id > global.server_count)) {
    console.log('server id and server count must be integers; and id < count');
    process.exit(1);
}

/**
 * Get port from environment and store in Express.
 */

// server 1 => 3000, server 2 => 3001, ...
let port = 3000 + global.server_id - 1;
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
